/*
 * @Author: zywOo 1372594487@qq.com
 * @Date: 2025-07-02 11:45:46
 * @LastEditors: zywOo 1372594487@qq.com
 * @LastEditTime: 2025-07-02 12:43:00
 * @FilePath: \go-learning\day2\07-array\slice\slice.go
 * @Description:切片(slice)声明，以及切片容量机制
 *
 */
package main

import "fmt"

func main() {
	// slice声明
	//例子
	var s1 []int               //声明一个slice
	s2 := []int{1, 2, 3, 4, 5} //声明一个slice并初始化

	fmt.Printf("%v\n", s1) //[]
	fmt.Printf("%v\n", s2) //[1,2,3,4,5]

	s5 := s2[1:3] // 从s2的索引1开始，到索引3结束，不包括索引3
	s6 := s2[:3]  // 从s2的索引0开始，到索引3结束，不包括索引3
	s7 := s2[:]   // 从s2的索引0开始，到索引len(s2)结束

	fmt.Printf("%v\n", s5) // [2 3]
	fmt.Printf("%v\n", s6) // [1 2 3]
	fmt.Printf("%v\n", s7) // [1 2 3 4 5]

	/* ----------------------------------------------------------------------- */
	fmt.Println("-------------------------")

	s3 := make([]int, 3)    //声明一个slice并指定长度,容量默认为长度，值为0
	s4 := make([]int, 3, 5) //声明一个slice并指定长度和容量

	fmt.Printf("%v\n", s3) //[0,0,0]
	fmt.Printf("%v\n", s4) //[0,0,0]

	/* ----------------------------------------------------------------------- */
	fmt.Println("-------------------------")

	s8 := append(s2, 4) // 将4添加到s2的末尾，返回一个新的切片
	s9 := copy(s2, s3)  // 将s3的内容复制到s2中，返回复制的元素个数
	s10 := len(s2)      // 返回s2的长度
	s11 := cap(s2)      // 返回s2的容量

	fmt.Printf("%v\n", s8)  // [1 2 3 4 5 4]
	fmt.Printf("%v\n", s9)  // 3
	fmt.Printf("%v\n", s10) // 6
	fmt.Printf("%v\n", s11) // 5
	/* ----------------------------------------------------------------------- */
	fmt.Println("-------------------------")
	// 切片容量机制
	s12 := []int{1, 2, 3, 4, 5}
	s13 := s12[1:3]             // 从s12的索引1开始，到索引3结束，不包括索引3
	s13 = append(s13, 6)        // 将6添加到s13的末尾，返回一个新的切片 [2 3 6]
	s13_len := len(s13)         // 返回s13的长度
	s13_cap := cap(s13)         // 返回s13的容量
	fmt.Printf("%v\n", s13)     // [2 3 6]
	fmt.Printf("%v\n", s13_len) // 3
	fmt.Printf("%v\n", s13_cap) // 4
	/* ----------------------------------------------------------------------- */
	fmt.Println("-------------------------")
	s13 = append(s13, 7, 7, 7)  // 将7添加到s13的末尾，返回一个新的切片 [2 3 6 7]
	fmt.Printf("%v\n", s13)     //[2 3 6 7 7 7]
	fmt.Printf("%v\n", s13_len) // 3
	fmt.Printf("%v\n", s13_cap) // 4
	s13_len = len(s13)          // 返回s13的长度
	s13_cap = cap(s13)          // 返回s13的容量
	fmt.Printf("%v\n", s13_len) // 6
	// 当s13的长度超过s12的容量时，s13会自动扩容，扩容后的容量是原来的两倍
	fmt.Printf("%v\n", s13_cap) // 8

}
